"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class glove(object):

    __slots__ = ["action"]

    __typenames__ = ["double"]

    __dimensions__ = [[40]]

    def __init__(self):
        self.action = [ 0.0 for dim0 in range(40) ]
        """ LCM Type: double[40] """

    def encode(self):
        buf = BytesIO()
        buf.write(glove._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>40d', *self.action[:40]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != glove._get_packed_fingerprint():
            raise ValueError("Decode error")
        return glove._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = glove()
        self.action = struct.unpack('>40d', buf.read(320))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if glove in parents: return 0
        tmphash = (0x4b784bcb131f98a8) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if glove._packed_fingerprint is None:
            glove._packed_fingerprint = struct.pack(">Q", glove._get_hash_recursive([]))
        return glove._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", glove._get_packed_fingerprint())[0]

